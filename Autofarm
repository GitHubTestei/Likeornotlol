-- Script generated by TurtleSpy, made by Intrer#0421
-- Put this in a LocalScript (StarterPlayerScripts)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Helper: try to find the SelectTeamEvent remote in common folders
local function findRemote(name)
    local folders = {"RemoteEvents", "Events", "RewardEvents"}
    for _, folderName in ipairs(folders) do
        local folder = ReplicatedStorage:FindFirstChild(folderName)
        if folder and folder:FindFirstChild(name) then
            return folder:FindFirstChild(name)
        end
    end
    -- fallback: try waiting briefly in case it's created a little later
    for _, folderName in ipairs(folders) do
        local ok, folder = pcall(function() return ReplicatedStorage:WaitForChild(folderName, 2) end)
        if ok and folder and folder:FindFirstChild(name) then
            return folder:FindFirstChild(name)
        end
    end
    return nil
end

local SelectTeamRemote = findRemote("SelectTeamEvent")
if not SelectTeamRemote then
    warn("SelectTeamEvent remote not found in RemoteEvents/Events/RewardEvents. Script stopped.")
    return
end

-- Wait for leaderstats and Likes
local leaderstats = LocalPlayer:WaitForChild("leaderstats", 10)
if not leaderstats then
    warn("leaderstats not found on LocalPlayer. Script stopped.")
    return
end

local likes = leaderstats:WaitForChild("Likes", 10)
if not likes then
    warn("Likes stat not found under leaderstats. Script stopped.")
    return
end

-- Debounce so one change doesn't trigger many flips
local debounce = false
local DEBOUNCE_SECONDS = 0.6

-- Track last sent team so toggles are consistent
local lastTeamName = LocalPlayer.Team and LocalPlayer.Team.Name or "Girl" -- start opposite so first toggle goes to "Boy"

local function toggleTeam()
    if debounce then return end
    debounce = true
    task.defer(function()
        task.wait(DEBOUNCE_SECONDS)
        debounce = false
    end)

    local target = (lastTeamName == "Boy") and "Girl" or "Boy"
    local ok, err = pcall(function()
        SelectTeamRemote:FireServer(target)
    end)
    if ok then
        lastTeamName = target
        print(("Requested team change -> %s"):format(target))
    else
        warn("SelectTeamEvent failed:", tostring(err))
    end
end

-- React to Likes changing (works for IntValue/NumberValue)
likes:GetPropertyChangedSignal("Value"):Connect(function()
    toggleTeam()
end)

-- also connect Changed just in case
likes.Changed:Connect(function()
    toggleTeam()
end)

print("Likes watcher initialized for LocalPlayer â€” will toggle between Boy/Girl on Likes changes.")
